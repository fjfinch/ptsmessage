#!/bin/bash

#COLORED OUTPUT
readonly RED='\033[0;31m'
readonly BLUE='\033[1;36m'
readonly GREEN='\033[0;32m'
readonly RESET='\033[0m'

usage () {
	printf -- "Usage: %s [-m|-k] [-a|-s]\n\n" "$(basename "${0}")"
	printf -- "-m:\tMessage (Ex. \"Hey\")\n"
	printf -- "-k:\tKill\n"
	printf -- "-a:\t.. all pts's\n"
	printf -- "-s:\t.. selected pts's (Ex. 2,3,4)\n\n"
	printf -- "-l:\tList all connected pts's\n"
	printf -- "-h:\tShow help (this screen)\n"
}

all_pts () {
	ALL="$(ls /dev/pts/)"
	mapfile -t LIST <<< "${ALL}"
}

while getopts ":m:kas:hl" flag; do
	case "${flag}" in
		m)
			readonly MESSAGE="${OPTARG}"
		;;
		k)
			readonly KILL=1
		;;
		a)
			all_pts
		;;
		s)
			readonly SELECTED="${OPTARG}"
			IFS="," read -r -a LIST <<< "${SELECTED}"
		;;
		h)
                        usage
                        exit 0
		;;
		l)
			all_pts
			for pts in "${LIST[@]}"; do
				if [[ "${pts}" =~ ^[0-9]+$ ]]; then
					printf "/dev/pts/%s\n" "${pts}"
				fi
			done
			exit 0
		;;
		\?)
			printf "Invalid flag: -%s\n" "${OPTARG}" 1>&2
			usage
			exit 1
		;;
		:)
			printf "Invalid option: -%s requires an argument\n" "${OPTARG}" 1>&2
			usage
			exit 1
		;;
	esac
done

if [[ -v MESSAGE && -v KILL || -v ALL && -v SELECTED || ! -v MESSAGE && ! -v KILL || ! -v ALL && ! -v SELECTED ]]; then
        usage
        exit 1
fi

#OTHER VARIABLES
readonly OWN="$(basename "$(tty)")"

#----------------------------------------------------------------------

printf "${BLUE}[+] Starting script${RESET}\n\n"

for pts in "${LIST[@]}"; do
	if [ "${pts}" != "${OWN}" ]; then
		if [[ "${pts}" =~ ^[0-9]+$ ]]; then
			if [ -v MESSAGE ]; then
				if printf "%s" "${MESSAGE}" 2>/dev/null >/dev/pts/"${pts}"; then
					printf "${GREEN}%-22s%s${RESET}\n" "Message send to pts:" "${pts}"
				else
					printf "${RED}%-22s%s${RESET}\n" "Error with pts:" "${pts}"
				fi
				continue
			fi
			if [ -v KILL ]; then
				if pkill -9 -t pts/"${pts}" 2>/dev/null; then
					printf "${GREEN}%-22s%s${RESET}\n" "Killed pts:" "${pts}"
				else
					printf "${RED}%-22s%s${RESET}\n" "Error with pts:" "${pts}"
				fi
			fi
		fi
	else
		printf "${RED}%-22s%s${RESET}\n" "Ignored own pts:" "${pts}"
	fi
done

printf "\n${BLUE}[+] Done${RESET}\n"
